
FrogINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800110  00800110  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001656  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be5  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7d  00000000  00000000  000027db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b70  00000000  00000000  00003c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e1       	ldi	r26, 0x10	; 16
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  8a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_led>:
#define LedB0_OFF	PORTB &= ~(1<<PB0)	// Set PA0 bit in  0 Logic state
#define LedB0_Toggle	PORTB ^=(1<<PB0);	//Exclusive OR on the Bit to Toggle its state.

void	setup_led()
{
	DDRB = 0xFF;	//All IO of Port A as output
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
  96:	08 95       	ret

00000098 <switchLed>:
}

void switchLed(unsigned int onoff)
{
	switch (onoff)
  98:	00 97       	sbiw	r24, 0x00	; 0
  9a:	21 f0       	breq	.+8      	; 0xa4 <switchLed+0xc>
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	21 f4       	brne	.+8      	; 0xa8 <switchLed+0x10>
	{
		case 1: //Light the Led
			LedB0_ON;
  a0:	c0 9a       	sbi	0x18, 0	; 24
			break;
  a2:	08 95       	ret
		case 0:
			LedB0_OFF;
  a4:	c0 98       	cbi	0x18, 0	; 24
			break;
  a6:	08 95       	ret
		default:
			LedB0_OFF;
  a8:	c0 98       	cbi	0x18, 0	; 24
  aa:	08 95       	ret

000000ac <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
  ac:	ac 01       	movw	r20, r24
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  ae:	cb 01       	movw	r24, r22
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	68 0f       	add	r22, r24
  b6:	79 1f       	adc	r23, r25
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  masklo	=~maskhi&ws2812_PORTREG;
  b8:	3b b3       	in	r19, 0x1b	; 27
  ba:	3e 7f       	andi	r19, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	21 60       	ori	r18, 0x01	; 1
  
  ws2812_DDRREG |= maskhi; // Enable output
  c0:	9a b3       	in	r25, 0x1a	; 26
  c2:	92 2b       	or	r25, r18
  c4:	9a bb       	out	0x1a, r25	; 26
  
  sreg_prev=SREG;
  c6:	af b7       	in	r26, 0x3f	; 63
  cli();  
  c8:	f8 94       	cli

  while (datlen--) {
  ca:	61 15       	cp	r22, r1
  cc:	71 05       	cpc	r23, r1
  ce:	89 f0       	breq	.+34     	; 0xf2 <loop57+0x18>
  d0:	fa 01       	movw	r30, r20
  d2:	64 0f       	add	r22, r20
  d4:	75 1f       	adc	r23, r21
    curbyte=*data++;
  d6:	91 91       	ld	r25, Z+
    
    asm volatile(
  d8:	88 e0       	ldi	r24, 0x08	; 8

000000da <loop57>:
  da:	2b bb       	out	0x1b, r18	; 27
  dc:	97 ff       	sbrs	r25, 7
  de:	3b bb       	out	0x1b, r19	; 27
  e0:	99 0f       	add	r25, r25
  e2:	00 00       	nop
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <loop57+0xc>
  e6:	3b bb       	out	0x1b, r19	; 27
  e8:	8a 95       	dec	r24
  ea:	b9 f7       	brne	.-18     	; 0xda <loop57>
  ws2812_DDRREG |= maskhi; // Enable output
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  ec:	e6 17       	cp	r30, r22
  ee:	f7 07       	cpc	r31, r23
  f0:	91 f7       	brne	.-28     	; 0xd6 <ws2812_setleds+0x2a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  f2:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	85 e8       	ldi	r24, 0x85	; 133
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <loop57+0x1c>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <USART_Init>:
 * \return void
 */
void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  fe:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
 100:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 106:	8e e8       	ldi	r24, 0x8E	; 142
 108:	80 bd       	out	0x20, r24	; 32
 10a:	08 95       	ret

0000010c <USART_Transmit>:
 * \return void
 */
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 110:	8c b9       	out	0x0c, r24	; 12
 112:	08 95       	ret

00000114 <USART_putstring>:
 * It is based on the fact, that in C, each string is ended with a null character. This null character is used to determined the end of the string.
 * \param StringPtr
 * 
 * \return void
 */
void USART_putstring(char* StringPtr){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00)			//Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 11a:	88 81       	ld	r24, Y
 11c:	88 23       	and	r24, r24
 11e:	31 f0       	breq	.+12     	; 0x12c <USART_putstring+0x18>
 120:	21 96       	adiw	r28, 0x01	; 1
	{    
		USART_Transmit(*StringPtr);	    //Using the simple send function we send one char at a time
 122:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
 * 
 * \return void
 */
void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00)			//Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 126:	89 91       	ld	r24, Y+
 128:	81 11       	cpse	r24, r1
 12a:	fb cf       	rjmp	.-10     	; 0x122 <USART_putstring+0xe>
	{    
		USART_Transmit(*StringPtr);	    //Using the simple send function we send one char at a time
		StringPtr++;					//We increment the pointer so we can read the next char
	}        
	
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <USART_Receive>:
 * \return unsigned char
 */
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 132:	5f 9b       	sbis	0x0b, 7	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 136:	8c b1       	in	r24, 0x0c	; 12
}
 138:	08 95       	ret

0000013a <getnextchar>:


char getnextchar(void)
{
 13a:	cf 93       	push	r28
	char tmp;
	
	tmp = USART_Receive();				// get next character
 13c:	0e 94 99 00 	call	0x132	; 0x132 <USART_Receive>
 140:	c8 2f       	mov	r28, r24
	//	tmp = toupper(tmp);					// force to upper case

	if (isgraph(tmp) || (tmp == ' '))
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 51 01 	call	0x2a2	; 0x2a2 <isgraph>
 148:	89 2b       	or	r24, r25
 14a:	11 f4       	brne	.+4      	; 0x150 <getnextchar+0x16>
 14c:	c0 32       	cpi	r28, 0x20	; 32
 14e:	39 f4       	brne	.+14     	; 0x15e <getnextchar+0x24>
	{
		USART_Transmit(tmp); 			// Echo the received character
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
		USART_Transmit("\r\n");			//next line
 156:	80 e6       	ldi	r24, 0x60	; 96
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
	}
	return(tmp);
}
 15e:	8c 2f       	mov	r24, r28
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <set_Led_OFF>:
		{
			led[i-1].r=RedINT;
			led[i-1].g=GreenINT;
			led[i-1].b=BlueINT;
		}	
}
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
 168:	88 23       	and	r24, r24
 16a:	a1 f0       	breq	.+40     	; 0x194 <set_Led_OFF+0x30>
 16c:	6c 2f       	mov	r22, r28
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	fb 01       	movw	r30, r22
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	cf 01       	movw	r24, r30
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	e8 5d       	subi	r30, 0xD8	; 216
 180:	fe 4f       	sbci	r31, 0xFE	; 254
 182:	11 82       	std	Z+1, r1	; 0x01
 184:	10 82       	st	Z, r1
 186:	12 82       	std	Z+2, r1	; 0x02
 188:	88 e2       	ldi	r24, 0x28	; 40
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 56 00 	call	0xac	; 0xac <ws2812_setleds>
 190:	c1 50       	subi	r28, 0x01	; 1
 192:	61 f7       	brne	.-40     	; 0x16c <set_Led_OFF+0x8>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	9c e0       	ldi	r25, 0x0C	; 12
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <set_Led_OFF+0x36>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <set_Led_OFF+0x40>
 1a4:	00 00       	nop
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <Custom_Definition>:
 1aa:	e9 e4       	ldi	r30, 0x49	; 73
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	25 e2       	ldi	r18, 0x25	; 37
 1b0:	31 e0       	ldi	r19, 0x01	; 1
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	81 83       	std	Z+1, r24	; 0x01
 1b6:	10 82       	st	Z, r1
 1b8:	12 82       	std	Z+2, r1	; 0x02
 1ba:	33 97       	sbiw	r30, 0x03	; 3
 1bc:	e2 17       	cp	r30, r18
 1be:	f3 07       	cpc	r31, r19
 1c0:	c9 f7       	brne	.-14     	; 0x1b4 <Custom_Definition+0xa>
 1c2:	08 95       	ret

000001c4 <Custom_Definition_GREEN>:
 1c4:	e9 e4       	ldi	r30, 0x49	; 73
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	25 e2       	ldi	r18, 0x25	; 37
 1ca:	31 e0       	ldi	r19, 0x01	; 1
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	11 82       	std	Z+1, r1	; 0x01
 1d0:	80 83       	st	Z, r24
 1d2:	12 82       	std	Z+2, r1	; 0x02
 1d4:	33 97       	sbiw	r30, 0x03	; 3
 1d6:	e2 17       	cp	r30, r18
 1d8:	f3 07       	cpc	r31, r19
 1da:	c9 f7       	brne	.-14     	; 0x1ce <Custom_Definition_GREEN+0xa>
 1dc:	08 95       	ret

000001de <test_SendArray>:
 1de:	64 e2       	ldi	r22, 0x24	; 36
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 56 00 	call	0xac	; 0xac <ws2812_setleds>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	89 e6       	ldi	r24, 0x69	; 105
 1ee:	98 e1       	ldi	r25, 0x18	; 24
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <test_SendArray+0x12>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <test_SendArray+0x1c>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <main>:
	unsigned char len;


	
	//Initialize the Strip LED OFF
	set_Led_OFF(LED_NUMBER);
 1fe:	8c e0       	ldi	r24, 0x0C	; 12
 200:	0e 94 b2 00 	call	0x164	; 0x164 <set_Led_OFF>
	
	//Initialize the Led color
	//Array_Definition();
	Custom_Definition();
 204:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Custom_Definition>
	Custom_Definition_GREEN();
 208:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Custom_Definition_GREEN>
	
		
	//Initialization of USART interface
	USART_Init ( MYUBRR );	//USART initialization
 20c:	83 e3       	ldi	r24, 0x33	; 51
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_Init>
	setup_led();	//Toggle led initialization
 214:	0e 94 49 00 	call	0x92	; 0x92 <setup_led>
		
	//Initial message
	USART_putstring(line);	//Send Welcome message
 218:	83 ef       	ldi	r24, 0xF3	; 243
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
	USART_putstring(society_name);
 220:	86 ed       	ldi	r24, 0xD6	; 214
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
	USART_putstring(project_name);
 228:	84 ec       	ldi	r24, 0xC4	; 196
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
	USART_putstring(project_version);
 230:	87 ea       	ldi	r24, 0xA7	; 167
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
	USART_putstring(line);
 238:	83 ef       	ldi	r24, 0xF3	; 243
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
	
	/* Replace with your application code */
	while (1) {
		
		
		test_SendArray();
 240:	0e 94 ef 00 	call	0x1de	; 0x1de <test_SendArray>

		USART_putstring(prompt);	//Prompt
 244:	8e e9       	ldi	r24, 0x9E	; 158
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
		data_received=getnextchar();
 24c:	0e 94 9d 00 	call	0x13a	; 0x13a <getnextchar>
 250:	c8 2f       	mov	r28, r24
		//ReadStringData(y);
		//USART_putstring( len);
		
				
		//Switch structure used to color LED		
		switch (data_received)
 252:	87 36       	cpi	r24, 0x67	; 103
 254:	79 f0       	breq	.+30     	; 0x274 <main+0x76>
 256:	82 37       	cpi	r24, 0x72	; 114
 258:	c9 f4       	brne	.+50     	; 0x28c <main+0x8e>
		{
			case 'r':	//h
			switchLed(1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 4c 00 	call	0x98	; 0x98 <switchLed>
			Custom_Definition();
 262:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Custom_Definition>
			test_SendArray();
 266:	0e 94 ef 00 	call	0x1de	; 0x1de <test_SendArray>
			USART_putstring(text_led);
 26a:	81 e8       	ldi	r24, 0x81	; 129
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
			break;
 272:	e6 cf       	rjmp	.-52     	; 0x240 <main+0x42>
			
			case 'g': //o
			switchLed(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 4c 00 	call	0x98	; 0x98 <switchLed>
			Custom_Definition_GREEN();
 27c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Custom_Definition_GREEN>
			test_SendArray();
 280:	0e 94 ef 00 	call	0x1de	; 0x1de <test_SendArray>
			USART_putstring(text_ledoff);
 284:	83 e6       	ldi	r24, 0x63	; 99
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
			
			default:
			if (isgraph(data_received))
 28c:	8c 2f       	mov	r24, r28
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 51 01 	call	0x2a2	; 0x2a2 <isgraph>
 294:	89 2b       	or	r24, r25
 296:	a1 f2       	breq	.-88     	; 0x240 <main+0x42>
			{
				USART_putstring(backspace);	//Permit to erase invalid character
 298:	83 ea       	ldi	r24, 0xA3	; 163
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 8a 00 	call	0x114	; 0x114 <USART_putstring>
 2a0:	cf cf       	rjmp	.-98     	; 0x240 <main+0x42>

000002a2 <isgraph>:
 2a2:	80 32       	cpi	r24, 0x20	; 32
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <isprint+0x2>

000002a6 <isprint>:
 2a6:	91 11       	cpse	r25, r1
 2a8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__ctype_isfalse>
 2ac:	80 52       	subi	r24, 0x20	; 32
 2ae:	8f 55       	subi	r24, 0x5F	; 95
 2b0:	d8 f7       	brcc	.-10     	; 0x2a8 <isprint+0x2>
 2b2:	08 95       	ret

000002b4 <__ctype_isfalse>:
 2b4:	99 27       	eor	r25, r25
 2b6:	88 27       	eor	r24, r24

000002b8 <__ctype_istrue>:
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
