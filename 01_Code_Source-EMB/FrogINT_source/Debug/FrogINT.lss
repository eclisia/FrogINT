
FrogINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  008000ce  008000ce  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e6  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5e  00000000  00000000  000019da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba0  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000030d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d6  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af5  00000000  00000000  000039c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000044bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e6       	ldi	r30, 0x66	; 102
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3c       	cpi	r26, 0xCE	; 206
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae ec       	ldi	r26, 0xCE	; 206
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  8a:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_led>:
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
  96:	08 95       	ret

00000098 <ws2812_setleds>:
  98:	ac 01       	movw	r20, r24
  9a:	cb 01       	movw	r24, r22
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	68 0f       	add	r22, r24
  a2:	79 1f       	adc	r23, r25
  a4:	3b b3       	in	r19, 0x1b	; 27
  a6:	3e 7f       	andi	r19, 0xFE	; 254
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	21 60       	ori	r18, 0x01	; 1
  ac:	9a b3       	in	r25, 0x1a	; 26
  ae:	92 2b       	or	r25, r18
  b0:	9a bb       	out	0x1a, r25	; 26
  b2:	af b7       	in	r26, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	61 15       	cp	r22, r1
  b8:	71 05       	cpc	r23, r1
  ba:	89 f0       	breq	.+34     	; 0xde <loop57+0x18>
  bc:	fa 01       	movw	r30, r20
  be:	64 0f       	add	r22, r20
  c0:	75 1f       	adc	r23, r21
  c2:	91 91       	ld	r25, Z+
  c4:	88 e0       	ldi	r24, 0x08	; 8

000000c6 <loop57>:
  c6:	2b bb       	out	0x1b, r18	; 27
  c8:	97 ff       	sbrs	r25, 7
  ca:	3b bb       	out	0x1b, r19	; 27
  cc:	99 0f       	add	r25, r25
  ce:	00 00       	nop
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <loop57+0xc>
  d2:	3b bb       	out	0x1b, r19	; 27
  d4:	8a 95       	dec	r24
  d6:	b9 f7       	brne	.-18     	; 0xc6 <loop57>
  d8:	e6 17       	cp	r30, r22
  da:	f7 07       	cpc	r31, r23
  dc:	91 f7       	brne	.-28     	; 0xc2 <ws2812_setleds+0x2a>
  de:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	85 e8       	ldi	r24, 0x85	; 133
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <loop57+0x1c>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <USART_Init>:
 * \return void
 */
void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  ea:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  ec:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  f2:	8e e8       	ldi	r24, 0x8E	; 142
  f4:	80 bd       	out	0x20, r24	; 32
	
	UCSRB |= (1 << RXCIE ); // Enable the USART Receive Complete interrupt ( USART_RXC )
  f6:	57 9a       	sbi	0x0a, 7	; 10
  f8:	08 95       	ret

000000fa <USART_Transmit>:
 * \return void
 */
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  fe:	8c b9       	out	0x0c, r24	; 12
 100:	08 95       	ret

00000102 <USART_putstring>:
 * It is based on the fact, that in C, each string is ended with a null character. This null character is used to determined the end of the string.
 * \param StringPtr
 * 
 * \return void
 */
void USART_putstring(char* StringPtr){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00)			//Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 108:	88 81       	ld	r24, Y
 10a:	88 23       	and	r24, r24
 10c:	31 f0       	breq	.+12     	; 0x11a <USART_putstring+0x18>
 10e:	21 96       	adiw	r28, 0x01	; 1
	{    
		USART_Transmit(*StringPtr);	    //Using the simple send function we send one char at a time
 110:	0e 94 7d 00 	call	0xfa	; 0xfa <USART_Transmit>
 * 
 * \return void
 */
void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00)			//Here we check if there is still more chars to send, this is done checking the actual char and see if it is different from the null char
 114:	89 91       	ld	r24, Y+
 116:	81 11       	cpse	r24, r1
 118:	fb cf       	rjmp	.-10     	; 0x110 <USART_putstring+0xe>
	{    
		USART_Transmit(*StringPtr);	    //Using the simple send function we send one char at a time
		StringPtr++;					//We increment the pointer so we can read the next char
	}        
	
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <USART_Receive>:
 * \return unsigned char
 */
unsigned char USART_Receive()
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
 120:	5f 9b       	sbis	0x0b, 7	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
 124:	8c b1       	in	r24, 0x0c	; 12
	
	//while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	//return(UDR);			/* Return the byte*/
	
	
}
 126:	08 95       	ret

00000128 <set_Led_OFF>:
		{
			led[i-1].r=RedINT;
			led[i-1].g=GreenINT;
			led[i-1].b=BlueINT;
		}	
}
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
 12c:	88 23       	and	r24, r24
 12e:	a1 f0       	breq	.+40     	; 0x158 <set_Led_OFF+0x30>
 130:	6c 2f       	mov	r22, r28
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	fb 01       	movw	r30, r22
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	cf 01       	movw	r24, r30
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	e8 0f       	add	r30, r24
 140:	f9 1f       	adc	r31, r25
 142:	ea 51       	subi	r30, 0x1A	; 26
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	11 82       	std	Z+1, r1	; 0x01
 148:	10 82       	st	Z, r1
 14a:	12 82       	std	Z+2, r1	; 0x02
 14c:	86 ee       	ldi	r24, 0xE6	; 230
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4c 00 	call	0x98	; 0x98 <ws2812_setleds>
 154:	c1 50       	subi	r28, 0x01	; 1
 156:	61 f7       	brne	.-40     	; 0x130 <set_Led_OFF+0x8>
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	9c e0       	ldi	r25, 0x0C	; 12
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <set_Led_OFF+0x36>
 166:	00 c0       	rjmp	.+0      	; 0x168 <set_Led_OFF+0x40>
 168:	00 00       	nop
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <Custom_Definition>:
 16e:	e7 e0       	ldi	r30, 0x07	; 7
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	23 ee       	ldi	r18, 0xE3	; 227
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	81 83       	std	Z+1, r24	; 0x01
 17a:	10 82       	st	Z, r1
 17c:	12 82       	std	Z+2, r1	; 0x02
 17e:	33 97       	sbiw	r30, 0x03	; 3
 180:	e2 17       	cp	r30, r18
 182:	f3 07       	cpc	r31, r19
 184:	c9 f7       	brne	.-14     	; 0x178 <Custom_Definition+0xa>
 186:	08 95       	ret

00000188 <Custom_Definition_GREEN>:
 188:	e7 e0       	ldi	r30, 0x07	; 7
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	23 ee       	ldi	r18, 0xE3	; 227
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	8c e3       	ldi	r24, 0x3C	; 60
 192:	11 82       	std	Z+1, r1	; 0x01
 194:	80 83       	st	Z, r24
 196:	12 82       	std	Z+2, r1	; 0x02
 198:	33 97       	sbiw	r30, 0x03	; 3
 19a:	e2 17       	cp	r30, r18
 19c:	f3 07       	cpc	r31, r19
 19e:	c9 f7       	brne	.-14     	; 0x192 <Custom_Definition_GREEN+0xa>
 1a0:	08 95       	ret

000001a2 <test_SendArray>:
 1a2:	64 e2       	ldi	r22, 0x24	; 36
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	86 ee       	ldi	r24, 0xE6	; 230
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 4c 00 	call	0x98	; 0x98 <ws2812_setleds>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <test_SendArray+0x12>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <test_SendArray+0x1c>
 1be:	00 00       	nop
 1c0:	08 95       	ret

000001c2 <main>:

	//Variables
	int8_t i;
	
	//Enable Interrupt
	sei();
 1c2:	78 94       	sei

	
	//Initialize the Strip LED OFF
	set_Led_OFF(LED_NUMBER);
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 94 00 	call	0x128	; 0x128 <set_Led_OFF>
	
	//Initialize the Led color
	//Array_Definition();
	Custom_Definition();
 1ca:	0e 94 b7 00 	call	0x16e	; 0x16e <Custom_Definition>
	Custom_Definition_GREEN();
 1ce:	0e 94 c4 00 	call	0x188	; 0x188 <Custom_Definition_GREEN>
	
		
	//Initialization of USART interface
	USART_Init ( MYUBRR );	//USART initialization
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 75 00 	call	0xea	; 0xea <USART_Init>
	setup_led();	//Toggle led initialization
 1da:	0e 94 49 00 	call	0x92	; 0x92 <setup_led>

		
	//Initial message
	USART_putstring(line);	//Send Welcome message
 1de:	81 eb       	ldi	r24, 0xB1	; 177
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	USART_putstring(society_name);
 1e6:	84 e9       	ldi	r24, 0x94	; 148
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	USART_putstring(project_name);
 1ee:	82 e8       	ldi	r24, 0x82	; 130
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	USART_putstring(project_version);
 1f6:	85 e6       	ldi	r24, 0x65	; 101
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	USART_putstring(line);
 1fe:	81 eb       	ldi	r24, 0xB1	; 177
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	
	
	USART_putstring(prompt);	//Prompt
 206:	80 e6       	ldi	r24, 0x60	; 96
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>

		
		
		
		
		test_SendArray();
 20e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <test_SendArray>
 212:	fd cf       	rjmp	.-6      	; 0x20e <main+0x4c>

00000214 <__vector_11>:

			
	}
}
ISR (USART_RXC_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	2f 93       	push	r18
 220:	3f 93       	push	r19
 222:	4f 93       	push	r20
 224:	5f 93       	push	r21
 226:	6f 93       	push	r22
 228:	7f 93       	push	r23
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	ef 93       	push	r30
 234:	ff 93       	push	r31

			
		
			
	char data_received;	//local variable to get the character received through the USART
	data_received= USART_Receive();
 236:	0e 94 90 00 	call	0x120	; 0x120 <USART_Receive>
	USART_putstring(data_received);
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 81 00 	call	0x102	; 0x102 <USART_putstring>
	
	
	
	
	
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
